layer_dense(units = 20, activation = "relu") %>%
layer_dense(units = 20, activation = "relu") %>%
layer_dense(1, activation = "linear")
summary(nn_model)
##Compiling the model
nn_model %>%
compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = c("mse", "mae")
)
##Running the model
history <-
fit(
object = nn_model,
x = as.matrix(train_x),
y = train_y,
batch_size = 200,
epochs = 500
)
install.packages("xgboost")
train %>%
mutate(
lm_pred = predict(lm_fit, train_x),
lm_sqr_error = (deaths - lm_pred)^2,
ilm_pred = predict(lm_inter_fit, train_x),
ilm_sqr_error = (deaths - ilm_pred)^2,
nn_pred = predict(nn_model, as.matrix(train_x)),
nn_sqr_error = (deaths - nn_pred)^2,
) %>%
summarize(
lm_mse = mean(lm_sqr_error, na.rm = TRUE),
ilm_pred = mean(ilm_sqr_error, na.rm = TRUE),
nn_mse = mean(nn_sqr_error, na.rm = TRUE)
)
train
knn_model <-
train(
deaths ~ .,
data = train,
method = "knn",
trControl = ctrl,
metric = "RMSE"
)
library(caret)
install.packages("caret")
library(caret)
ctrl <- trainControl(method = "none", number = 10, savePredictions = TRUE)
knn_model <-
train(
deaths ~ .,
data = train,
method = "knn",
trControl = ctrl,
metric = "RMSE"
)
train %>%
mutate(
lm_pred = predict(lm_fit, train_x),
lm_sqr_error = (deaths - lm_pred)^2,
ilm_pred = predict(lm_inter_fit, train_x),
ilm_sqr_error = (deaths - ilm_pred)^2,
nn_pred = predict(nn_model, as.matrix(train_x)),
nn_sqr_error = (deaths - nn_pred)^2,
knn_pred = predict(knn_model, train_x),
knn_sqr_error = (deaths - knn_pred)^2
) %>%
summarize_at(vars(ends_with(sqr_error), mean, na.rm = TRUE))
train %>%
mutate(
lm_pred = predict(lm_fit, train_x),
lm_sqr_error = (deaths - lm_pred)^2,
ilm_pred = predict(lm_inter_fit, train_x),
ilm_sqr_error = (deaths - ilm_pred)^2,
nn_pred = predict(nn_model, as.matrix(train_x)),
nn_sqr_error = (deaths - nn_pred)^2,
knn_pred = predict(knn_model, train_x),
knn_sqr_error = (deaths - knn_pred)^2
) %>%
summarize_at(vars(ends_with("sqr_error"), mean, na.rm = TRUE))
train %>%
mutate(
lm_pred = predict(lm_fit, train_x),
lm_sqr_error = (deaths - lm_pred)^2,
ilm_pred = predict(lm_inter_fit, train_x),
ilm_sqr_error = (deaths - ilm_pred)^2,
nn_pred = predict(nn_model, as.matrix(train_x)),
nn_sqr_error = (deaths - nn_pred)^2,
knn_pred = predict(knn_model, train_x),
knn_sqr_error = (deaths - knn_pred)^2
) %>%
summarize_at(vars(ends_with("sqr_error")), mean, na.rm = TRUE)
train %>%
mutate(
lm_pred = predict(lm_fit, train_x),
lm_sqr_error = (deaths - lm_pred)^2,
ilm_pred = predict(lm_inter_fit, train_x),
ilm_sqr_error = (deaths - ilm_pred)^2,
nn_pred = predict(nn_model, as.matrix(train_x)),
nn_sqr_error = (deaths - nn_pred)^2,
knn_pred = predict(knn_model, train_x),
knn_sqr_error = (deaths - knn_pred)^2
) %>%
summarize_at(vars(ends_with("sqr_error")), mean, na.rm = TRUE)
train %>%
mutate(
lm_pred = predict(lm_fit, train_x),
lm_sqr_error = (deaths - lm_pred)^2,
ilm_pred = predict(lm_inter_fit, train_x),
ilm_sqr_error = (deaths - ilm_pred)^2,
nn_pred = predict(nn_model, as.matrix(train_x)),
nn_sqr_error = (deaths - nn_pred)^2,
knn_pred = predict(knn_model, train_x),
knn_sqr_error = (deaths - knn_pred)^2
) %>%
summarize_at(vars(ends_with("sqr_error")), mean, na.rm = TRUE)
lasso_fit <- glmnet(train_x, train_y, alpha = 1, lambda = NULL)
install.packages("glmnet")
library(glmnet)
lasso_fit <- glmnet(train_x, train_y, alpha = 1, lambda = NULL)
lasso_fit <- glmnet(train_x, train_y, alpha = 1, lambda = NULL)
train_y
lasso_fit <- glmnet(as.matrix(train_x), train_y, alpha = 1, lambda = NULL)
lasso_fit <- glmnet(as.matrix(train_x), train_y, alpha = 1, lambda = NULL)
lasso_fit <- cv.glmnet(as.matrix(train_x), train_y, alpha = 0)
lasso_fit <- cv.glmnet(as.matrix(train_x), train_y, alpha = 1)
lasso_fit <- cv.glmnet(as.matrix(train_x), train_y, alpha = 1)
ridge_fit <- cv.glmnet(as.matrix(train_x), train_y, alpha = 0)
train %>%
mutate(
lm_pred = predict(lm_fit, train_x),
lm_sqr_error = (deaths - lm_pred)^2,
ilm_pred = predict(lm_inter_fit, train_x),
ilm_sqr_error = (deaths - ilm_pred)^2,
nn_pred = predict(nn_model, as.matrix(train_x)),
nn_sqr_error = (deaths - nn_pred)^2,
knn_pred = predict(knn_model, train_x),
knn_sqr_error = (deaths - knn_pred)^2,
lasso_pred = predict(lasso_fit, train_x),
lasso_sqr_error = (deaths - lasso_pred)^2,
ridge_pred = predict(ridge_fit, train_x),
ridge_sqr_error = (deaths - ridge_pred)^2,
) %>%
summarize_at(vars(ends_with("sqr_error")), mean, na.rm = TRUE)
train %>%
mutate(
lm_pred = predict(lm_fit, train_x),
lm_sqr_error = (deaths - lm_pred)^2,
ilm_pred = predict(lm_inter_fit, train_x),
ilm_sqr_error = (deaths - ilm_pred)^2,
nn_pred = predict(nn_model, as.matrix(train_x)),
nn_sqr_error = (deaths - nn_pred)^2,
knn_pred = predict(knn_model, train_x),
knn_sqr_error = (deaths - knn_pred)^2,
lasso_pred = predict(lasso_fit, as.matrix(train_x)),
lasso_sqr_error = (deaths - lasso_pred)^2,
ridge_pred = predict(ridge_fit, as.matrix(train_x)),
ridge_sqr_error = (deaths - ridge_pred)^2,
) %>%
summarize_at(vars(ends_with("sqr_error")), mean, na.rm = TRUE)
valid %>%
mutate(
lm_pred = predict(lm_fit, valid_x),
lm_sqr_error = (deaths - lm_pred)^2,
ilm_pred = predict(lm_inter_fit, valid_x),
ilm_sqr_error = (deaths - ilm_pred)^2,
nn_pred = predict(nn_model, as.matrix(valid_x)),
nn_sqr_error = (deaths - nn_pred)^2,
knn_pred = predict(knn_model, valid_x),
knn_sqr_error = (deaths - knn_pred)^2,
lasso_pred = predict(lasso_fit, as.matrix(valid_x)),
lasso_sqr_error = (deaths - lasso_pred)^2,
ridge_pred = predict(ridge_fit, as.matrix(valid_x)),
ridge_sqr_error = (deaths - ridge_pred)^2,
) %>%
summarize_at(vars(ends_with("sqr_error")), mean, na.rm = TRUE)
library(keras)
#input shape of x train
input_shape <- ncol(train_x)
##Specifying model architecture
nn_model <-
keras_model_sequential() %>%
layer_dense(input_shape = input_shape, units = 20, activation = "relu") %>%
# layer_dropout(0.2) %>%
layer_dense(units = 20, activation = "relu") %>%
layer_dense(units = 20, activation = "relu") %>%
layer_dense(units = 20, activation = "relu") %>%
layer_dense(units = 20, activation = "relu") %>%
layer_dense(units = 20, activation = "relu") %>%
layer_dense(units = 20, activation = "relu") %>%
layer_dense(1, activation = "linear")
summary(nn_model)
##Compiling the model
nn_model %>%
compile(
loss = "mean_squared_error",
optimizer = "adam",
metrics = c("mse", "mae")
)
##Running the model
history <-
fit(
object = nn_model,
x = as.matrix(train_x),
y = train_y,
batch_size = 200,
epochs = 500
)
train %>%
mutate(
lm_pred = predict(lm_fit, train_x),
lm_sqr_error = (deaths - lm_pred)^2,
ilm_pred = predict(lm_inter_fit, train_x),
ilm_sqr_error = (deaths - ilm_pred)^2,
nn_pred = predict(nn_model, as.matrix(train_x)),
nn_sqr_error = (deaths - nn_pred)^2,
knn_pred = predict(knn_model, train_x),
knn_sqr_error = (deaths - knn_pred)^2,
lasso_pred = predict(lasso_fit, as.matrix(train_x)),
lasso_sqr_error = (deaths - lasso_pred)^2,
ridge_pred = predict(ridge_fit, as.matrix(train_x)),
ridge_sqr_error = (deaths - ridge_pred)^2,
) %>%
summarize_at(vars(ends_with("sqr_error")), mean, na.rm = TRUE)
valid %>%
mutate(
lm_pred = predict(lm_fit, valid_x),
lm_sqr_error = (deaths - lm_pred)^2,
ilm_pred = predict(lm_inter_fit, valid_x),
ilm_sqr_error = (deaths - ilm_pred)^2,
nn_pred = predict(nn_model, as.matrix(valid_x)),
nn_sqr_error = (deaths - nn_pred)^2,
knn_pred = predict(knn_model, valid_x),
knn_sqr_error = (deaths - knn_pred)^2,
lasso_pred = predict(lasso_fit, as.matrix(valid_x)),
lasso_sqr_error = (deaths - lasso_pred)^2,
ridge_pred = predict(ridge_fit, as.matrix(valid_x)),
ridge_sqr_error = (deaths - ridge_pred)^2,
) %>%
summarize_at(vars(ends_with("sqr_error")), mean, na.rm = TRUE)
valid %>%
mutate(nn_pred = predict(nn_model, as.matrix(valid_x)))
valid %>%
mutate(nn_pred = predict(nn_model, as.matrix(valid_x))) %>%
select(deaths, nn_pred)
valid %>%
mutate(nn_pred = predict(nn_model, as.matrix(valid_x))) %>%
select(deaths, nn_pred) %>%
mutate(
diff = abs(deaths - nn_pred)
)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
select(deaths, nn_pred, everything())
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
select(deaths, nn_pred, everything())
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
select(deaths, nn_pred, diff, everything()) %>%
top_n(100, wt = )
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
select(deaths, nn_pred, diff, everything()) %>%
top_n(100, wt = diff)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
select(deaths, nn_pred, diff, everything()) %>%
arrange(diff)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
select(deaths, nn_pred, diff, everything()) %>%
arrange(desc(diff))
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
select(deaths, nn_pred, diff, everything()) %>%
arrange(desc(diff)) %>%
slice(1:100)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(confirmed, deaths)) +
geom_point()
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point()
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
scale_x_log10() +
scale_y_log10()
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
coord_equal()
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
coord_fixed(ratio = 1)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
coord_fixed(ratio = 1)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
coord_fixed(ratio = 1) +
coord_cartesian(xlim = c(0, 1000), ylim = c(0, 1000))
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
coord_fixed(ratio = 1, xlim = c(0, 1000), ylim = c(0, 1000)) +
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
coord_fixed(ratio = 1, xlim = c(0, 1000), ylim = c(0, 1000))
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
coord_fixed(ratio = 1, xlim = c(0, 1000), ylim = c(0, 1000))
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
coord_fixed(ratio = 1, xlim = c(0, 1000), ylim = c(0, 1000))
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred),
category = if_else(deaths > 1000, 1, 2)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
coord_fixed(ratio = 1, xlim = c(0, 1000), ylim = c(0, 1000))
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred),
category = if_else(deaths > 1000, 1, 2)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
coord_fixed(ratio = 1, xlim = c(0, 1000), ylim = c(0, 1000)) +
facet_wrap(vars(category))
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred),
category = if_else(deaths > 1000, 1, 2)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
coord_fixed(ratio = 1) +
facet_wrap(vars(category))
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred),
category = if_else(deaths > 1000, 1, 2)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
coord_fixed(ratio = 1) +
facet_wrap(vars(category), scales = "free")
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred),
category = if_else(deaths > 1000, 1, 2)
) %>%
ggplot(aes(nn_pred, deaths)) +
geom_point() +
geom_abline(slope = 1, intercept = 0) +
# coord_fixed(ratio = 1) +
facet_wrap(vars(category), scales = "free")
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred),
category = if_else(deaths > 1000, 1, 2)
)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
select(deaths, nn_pred, diff, everything()) %>%
arrange(desc(diff)) %>%
slice(1:100)
valid %>%
mutate(
nn_pred = predict(nn_model, as.matrix(valid_x)),
diff = abs(deaths - nn_pred)
) %>%
select(deaths, nn_pred, diff, everything()) %>%
arrange(desc(diff)) %>%
slice(1:100) %>%
write_csv("error_analysis.csv")
